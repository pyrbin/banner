[ todo/notes ]

- simplify render technique
  guidelines
    -> window
	-> graphics (context) -> swapchain & device
	-> renderer -> cmd_pool & cmd_buffers
	-> render_passes
		-> subpasses
			-> pipelines

    the graphics ctx object is sent between each class (not some using device, some using swapchain etc)
	order of destruction is bottom to top (pipelines -> subpass etc...)
	all resources are bound to a ctx, buffers & images uses ctx VMA to allocate memory
	use vk() to return raw vulkan.hpp object.
	vulkan object are prefixed vk_ in their corresponding wrapper.
	never pass pure vk objects, always pass the wrapper.

  engine design: 
	user can override certain event functions

	engine->load = [&](){}
	engine->init = [&](){}

	engine->pre_update = [&](){}
	engine->update = [&](){}
	engine->post_update = [&](){}

	engine->render = [&](){}
	engine->teardown = [&](){}


	
- follow https://vulkan-tutorial.com/Vertex_buffers/Vertex_buffer_creation to completion

- read following:
	https://renderdoc.org/vulkan-in-30-minutes.html
	https://www.jeremyong.com/c++/vulkan/graphics/rendering/2018/03/26/how-to-learn-vulkan/

- lookup deps for model rendering & input?
- render a model
- camera & inputs

- fix validation errors
- replace vulkan_checks with runtime errors
- cleaner shader loading

[ extras ]

[ event handler ]
- event handler using https://blog.keha.dev/posts/cpp20-class-as-non-type-template-param/
	event_handler<{ "resize", void(u32, u32) }, { "created", void() }>
	on("resize" | "created", []((u32, u32 | /* empty */){ /* event cb */ })
	- [P0732R2] https://en.cppreference.com/w/cpp/compiler_support
	- references https://github.com/hanickadot/compile-time-regular-expressions

- add imgui
- fix glw3.dll dependency, currently i just copied the dll to the build folder